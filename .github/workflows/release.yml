name: Release

on:
  # Trigger on releases, tag pushes, or manual workflow dispatch
  release:
    types: [published]
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      bump_type:
        description: 'Version bump type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
          - rc
        default: 'rc'
      prerelease:
        description: 'Mark as pre-release (automatically true for RC)'
        required: false
        type: boolean
        default: true

permissions:
  contents: write
  packages: write

jobs:
  get-version:
    name: Get Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      tag_name: ${{ steps.get_version.outputs.tag_name }}
      is_prerelease: ${{ steps.get_version.outputs.is_prerelease }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for all tags

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Get latest tag
            LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
            LATEST_VERSION=${LATEST_TAG#v}

            # Parse version components
            IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_VERSION"
            # Remove any pre-release suffix from PATCH
            PATCH=${PATCH%%-*}

            # Determine new version based on bump type
            BUMP_TYPE="${{ github.event.inputs.bump_type }}"
            case $BUMP_TYPE in
              major)
                NEW_VERSION="$((MAJOR + 1)).0.0"
                IS_PRERELEASE="false"
                ;;
              minor)
                NEW_VERSION="${MAJOR}.$((MINOR + 1)).0"
                IS_PRERELEASE="false"
                ;;
              patch)
                NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))"
                IS_PRERELEASE="false"
                ;;
              rc)
                # For RC, bump patch and add -rc.N suffix
                # Find existing RC number if any
                RC_COUNT=$(git tag -l "v${MAJOR}.${MINOR}.$((PATCH + 1))-rc.*" | wc -l | tr -d ' ')
                NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))-rc.$((RC_COUNT + 1))"
                IS_PRERELEASE="true"
                ;;
            esac

            VERSION="v${NEW_VERSION}"
            echo "tag_name=${VERSION}" >> $GITHUB_OUTPUT
            echo "version=${NEW_VERSION}" >> $GITHUB_OUTPUT
            echo "is_prerelease=${IS_PRERELEASE}" >> $GITHUB_OUTPUT

          elif [ "${{ github.event_name }}" = "release" ]; then
            VERSION="${{ github.event.release.tag_name }}"
            IS_PRERELEASE="${{ github.event.release.prerelease }}"
            echo "tag_name=${VERSION}" >> $GITHUB_OUTPUT
            echo "version=${VERSION#v}" >> $GITHUB_OUTPUT
            echo "is_prerelease=${IS_PRERELEASE}" >> $GITHUB_OUTPUT

          else
            # Tag push
            VERSION="${GITHUB_REF#refs/tags/}"
            # Determine if prerelease based on version string
            if [[ "$VERSION" =~ -rc\. ]] || [[ "$VERSION" =~ -alpha ]] || [[ "$VERSION" =~ -beta ]]; then
              IS_PRERELEASE="true"
            else
              IS_PRERELEASE="false"
            fi
            echo "tag_name=${VERSION}" >> $GITHUB_OUTPUT
            echo "version=${VERSION#v}" >> $GITHUB_OUTPUT
            echo "is_prerelease=${IS_PRERELEASE}" >> $GITHUB_OUTPUT
          fi

  create-release:
    name: Create GitHub Release
    needs: get-version
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4

      - name: Create and push tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "${{ needs.get-version.outputs.tag_name }}" -m "Release ${{ needs.get-version.outputs.tag_name }}"
          git push origin "${{ needs.get-version.outputs.tag_name }}"

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          PRERELEASE_FLAG=""
          if [ "${{ needs.get-version.outputs.is_prerelease }}" = "true" ]; then
            PRERELEASE_FLAG="--prerelease"
          fi

          gh release create "${{ needs.get-version.outputs.tag_name }}" \
            --title "Release ${{ needs.get-version.outputs.tag_name }}" \
            --notes "Automated release created by workflow dispatch" \
            $PRERELEASE_FLAG

  publish-binaries:
    name: Publish Binaries
    needs: get-version
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.25"

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          VERSION=${{ needs.get-version.outputs.version }}
          output_name="fluxbase-${{ matrix.goos }}-${{ matrix.goarch }}"
          go build -ldflags="-s -w -X main.Version=${VERSION}" -o "${output_name}" cmd/fluxbase/main.go

          # Create checksums
          sha256sum "${output_name}" > "${output_name}.sha256"

          # Create tar.gz for non-Windows
          if [ "${{ matrix.goos }}" != "windows" ]; then
            tar -czf "${output_name}.tar.gz" "${output_name}"
            sha256sum "${output_name}.tar.gz" > "${output_name}.tar.gz.sha256"
          else
            # Create zip for Windows
            zip "${output_name}.zip" "${output_name}"
            sha256sum "${output_name}.zip" > "${output_name}.zip.sha256"
          fi

      - name: Upload Release Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ needs.get-version.outputs.tag_name }} \
            fluxbase-${{ matrix.goos }}-${{ matrix.goarch }}* \
            --clobber

  publish-docker:
    name: Publish Docker Image
    needs: get-version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Check Docker Hub credentials
        id: dockerhub-check
        run: |
          if [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ] && [ -n "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
            echo "available=true" >> $GITHUB_OUTPUT
          else
            echo "available=false" >> $GITHUB_OUTPUT
          fi

      - name: Log in to Docker Hub
        if: steps.dockerhub-check.outputs.available == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (with Docker Hub)
        if: steps.dockerhub-check.outputs.available == 'true'
        id: meta-with-dockerhub
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ vars.DOCKERHUB_ORG || 'wayli-app' }}/fluxbase
            ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.get-version.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.get-version.outputs.version }}
            type=semver,pattern={{major}},value=${{ needs.get-version.outputs.version }}
            type=raw,value=latest

      - name: Extract metadata (GHCR only)
        if: steps.dockerhub-check.outputs.available == 'false'
        id: meta-ghcr-only
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.get-version.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.get-version.outputs.version }}
            type=semver,pattern={{major}},value=${{ needs.get-version.outputs.version }}
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-with-dockerhub.outputs.tags || steps.meta-ghcr-only.outputs.tags }}
          labels: ${{ steps.meta-with-dockerhub.outputs.labels || steps.meta-ghcr-only.outputs.labels }}
          build-args: |
            VERSION=${{ needs.get-version.outputs.version }}
            COMMIT=${{ github.sha }}
            BUILD_DATE=${{ github.event.repository.updated_at }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  publish-npm-sdk:
    name: Publish TypeScript SDK to NPM
    needs: get-version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"

      - name: Build and Publish SDK
        working-directory: ./sdk/typescript
        run: |
          npm ci
          npm run build
          npm version ${{ needs.get-version.outputs.version }} --no-git-tag-version
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish-go-module:
    name: Publish Go Module
    needs: get-version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.25"

      - name: Publish Go module
        run: |
          # Go modules are automatically available when tagged
          echo "Go module published at github.com/wayli-app/fluxbase@${{ needs.get-version.outputs.tag_name }}"

          # Update pkg.go.dev
          curl "https://proxy.golang.org/github.com/wayli-app/fluxbase/@v/${{ needs.get-version.outputs.tag_name }}.info"

  publish-helm-chart:
    name: Publish Helm Chart to GHCR
    needs: get-version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: 'latest'

      - name: Log in to GitHub Container Registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | helm registry login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Update Chart version
        run: |
          VERSION=${{ needs.get-version.outputs.version }}
          sed -i "s/^version:.*/version: ${VERSION}/" deploy/helm/fluxbase/Chart.yaml
          sed -i "s/^appVersion:.*/appVersion: \"${VERSION}\"/" deploy/helm/fluxbase/Chart.yaml

      - name: Package Helm chart
        run: |
          helm package deploy/helm/fluxbase

      - name: Push Helm chart to GHCR
        run: |
          helm push fluxbase-${{ needs.get-version.outputs.version }}.tgz oci://ghcr.io/${{ github.repository_owner }}/charts

      - name: Generate Helm repository index
        run: |
          mkdir -p .helm-repo
          mv fluxbase-${{ needs.get-version.outputs.version }}.tgz .helm-repo/
          helm repo index .helm-repo --url https://${{ github.repository_owner }}.github.io/fluxbase

      - name: Commit and push index to gh-pages
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Fetch gh-pages branch or create orphan
          git fetch origin gh-pages:gh-pages || git checkout --orphan gh-pages

          # Switch to gh-pages
          git checkout gh-pages

          # Keep only Helm artifacts
          git rm -rf . || true
          cp -r .helm-repo/* .

          # Commit and push
          git add index.yaml *.tgz
          git commit -m "Release Helm chart v${{ needs.get-version.outputs.version }}"
          git push origin gh-pages
