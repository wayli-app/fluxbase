name: Release

on:
  push:
    branches: [main]

permissions:
  contents: write
  packages: write
  pull-requests: write

jobs:
  release-please:
    name: Release Please
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
      version: ${{ steps.release.outputs.version }}
    steps:
      - uses: google-github-actions/release-please-action@v4
        id: release
        with:
          release-type: go
          package-name: fluxbase
          token: ${{ secrets.GITHUB_TOKEN }}

  publish-binaries:
    name: Publish Binaries
    needs: release-please
    if: needs.release-please.outputs.release_created
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
          - goos: windows
            goarch: amd64

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22"

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          VERSION=${{ needs.release-please.outputs.version }}
          output_name="fluxbase-${{ matrix.goos }}-${{ matrix.goarch }}"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            output_name="${output_name}.exe"
          fi
          go build -ldflags="-s -w -X main.Version=${VERSION}" -o "${output_name}" cmd/fluxbase/main.go

          # Create checksums
          sha256sum "${output_name}" > "${output_name}.sha256"

          # Create tar.gz for non-Windows
          if [ "${{ matrix.goos }}" != "windows" ]; then
            tar -czf "${output_name}.tar.gz" "${output_name}"
            sha256sum "${output_name}.tar.gz" > "${output_name}.tar.gz.sha256"
          else
            # Create zip for Windows
            zip "${output_name}.zip" "${output_name}"
            sha256sum "${output_name}.zip" > "${output_name}.zip.sha256"
          fi

      - name: Upload Release Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ needs.release-please.outputs.tag_name }} \
            fluxbase-${{ matrix.goos }}-${{ matrix.goarch }}* \
            --clobber

  publish-docker:
    name: Publish Docker Image
    needs: release-please
    if: needs.release-please.outputs.release_created
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            wayli-app/fluxbase
            ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.release-please.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.release-please.outputs.version }}
            type=semver,pattern={{major}},value=${{ needs.release-please.outputs.version }}
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ needs.release-please.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  publish-npm-sdk:
    name: Publish TypeScript SDK to NPM
    needs: release-please
    if: needs.release-please.outputs.release_created
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"

      - name: Build and Publish SDK
        working-directory: ./sdk/typescript
        run: |
          npm ci
          npm run build
          npm version ${{ needs.release-please.outputs.version }} --no-git-tag-version
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish-go-module:
    name: Publish Go Module
    needs: release-please
    if: needs.release-please.outputs.release_created
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22"

      - name: Publish Go module
        run: |
          # Go modules are automatically available when tagged
          echo "Go module published at github.com/wayli-app/fluxbase@${{ needs.release-please.outputs.tag_name }}"

          # Update pkg.go.dev
          curl "https://proxy.golang.org/github.com/wayli-app/fluxbase/@v/${{ needs.release-please.outputs.tag_name }}.info"
