name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  GO_VERSION: "1.25"
  POSTGRES_VERSION: "17"

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Get dependencies
        run: |
          go mod download
          go mod verify

      - name: Create dist directory with placeholder for embed directive
        run: |
          mkdir -p internal/adminui/dist
          echo '<!DOCTYPE html><html><head><title>Placeholder</title></head><body></body></html>' > internal/adminui/dist/index.html

      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.2

      - name: Run golangci-lint
        run: golangci-lint run --disable=typecheck ./...

      - name: Check go fmt
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Please run 'go fmt ./...'"
            gofmt -s -l .
            exit 1
          fi

  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: fluxbase_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      mailhog:
        image: mailhog/mailhog:latest
        ports:
          - 1025:1025  # SMTP
          - 8025:8025  # Web UI

      minio:
        image: minio/minio:edge-cicd
        env:
          MINIO_ROOT_USER: minioadmin
          MINIO_ROOT_PASSWORD: minioadmin
        ports:
          - 9000:9000
        options: >-
          --health-cmd "curl --silent --fail http://localhost:9000/minio/health/live || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Get dependencies
        run: |
          go mod download
          go mod verify

      - name: Run database migrations
        env:
          DATABASE_URL: "postgres://postgres:postgres@localhost:5432/fluxbase_test?sslmode=disable"
        run: |
          go install -tags 'postgres' github.com/golang-migrate/migrate/v4/cmd/migrate@latest
          migrate -path internal/database/migrations -database "$DATABASE_URL" up

      - name: Setup MinIO bucket
        run: |
          # Wait for MinIO to be ready
          timeout 30 bash -c 'until curl -f http://localhost:9000/minio/health/live; do sleep 1; done'

          # Install mc (MinIO client)
          wget https://dl.min.io/client/mc/release/linux-amd64/mc
          chmod +x mc

          # Configure mc
          ./mc alias set minio http://localhost:9000 minioadmin minioadmin

          # Create test bucket
          ./mc mb minio/fluxbase-test || true
          ./mc anonymous set public minio/fluxbase-test

      - name: Create dist directory with placeholder for embed directive
        run: |
          mkdir -p internal/adminui/dist
          echo '<!DOCTYPE html><html><head><title>Placeholder</title></head><body></body></html>' > internal/adminui/dist/index.html

      - name: Run unit tests with coverage
        timeout-minutes: 5
        env:
          FLUXBASE_DATABASE_HOST: localhost
          FLUXBASE_DATABASE_PORT: 5432
          FLUXBASE_DATABASE_USER: postgres
          FLUXBASE_DATABASE_PASSWORD: postgres
          FLUXBASE_DATABASE_DATABASE: fluxbase_test
        run: |
          # Run unit tests with -short flag to skip integration tests
          # Integration tests require database setup and can be slow
          go test -v -short -race -timeout=3m -coverprofile=coverage.out -covermode=atomic $(go list ./... | grep -v '/test/e2e' | grep -v '/test$')
          go tool cover -html=coverage.out -o coverage.html

      - name: Run e2e tests
        timeout-minutes: 5
        env:
          FLUXBASE_DATABASE_HOST: localhost
          FLUXBASE_DATABASE_PORT: 5432
          FLUXBASE_DATABASE_USER: postgres
          FLUXBASE_DATABASE_PASSWORD: postgres
          FLUXBASE_DATABASE_DATABASE: fluxbase_test
          FLUXBASE_EMAIL_SMTP_HOST: localhost
          FLUXBASE_EMAIL_SMTP_PORT: 1025
          FLUXBASE_STORAGE_S3_ENDPOINT: localhost:9000
          FLUXBASE_STORAGE_S3_ACCESS_KEY: minioadmin
          FLUXBASE_STORAGE_S3_SECRET_KEY: minioadmin
          FLUXBASE_STORAGE_S3_BUCKET: fluxbase-test
        run: |
          # Run e2e tests
          go test -v -race -timeout=5m ./test/e2e/...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage.out
            coverage.html

  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: admin/package-lock.json

      - name: Build SDKs and Admin UI
        run: |
          # Build SDK
          cd sdk
          npm ci
          npm run build

          # Build SDK React
          cd ../sdk-react
          npm ci
          npm run build

          # Build Admin UI (depends on SDKs)
          cd ../admin
          npm ci
          npm run build

          # Copy built files to internal/adminui/dist for embedding
          mkdir -p ../internal/adminui/dist
          cp -r dist/* ../internal/adminui/dist/

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          mkdir -p dist
          output_name="fluxbase-${{ matrix.goos }}-${{ matrix.goarch }}"
          BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          go build -ldflags="-s -w -X main.Version=dev-${GITHUB_SHA::8} -X main.Commit=${GITHUB_SHA} -X main.BuildDate=${BUILD_DATE}" -o "dist/${output_name}" cmd/fluxbase/main.go

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: fluxbase-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/*

  docker:
    name: Docker Build Test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image (test only, no push)
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: false
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ghcr.io/${{ github.repository }}:test

